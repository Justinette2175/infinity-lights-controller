"""All input for the create `Mode` mutation."""
input CreateModeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Mode` to be created by this mutation."""
  mode: ModeInput!
}

"""The output of our create `Mode` mutation."""
type CreateModePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Mode` that was created by this mutation."""
  mode: Mode

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Mode`. May be used by Relay 1."""
  modeEdge(
    """The method to use when ordering `Mode`."""
    orderBy: [ModesOrderBy!] = PRIMARY_KEY_ASC
  ): ModesEdge
}

"""All input for the create `Setting` mutation."""
input CreateSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Setting` to be created by this mutation."""
  setting: SettingInput!
}

"""The output of our create `Setting` mutation."""
type CreateSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Setting` that was created by this mutation."""
  setting: Setting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mode` that is related to this `Setting`."""
  modeByModeId: Mode

  """An edge for our `Setting`. May be used by Relay 1."""
  settingEdge(
    """The method to use when ordering `Setting`."""
    orderBy: [SettingsOrderBy!] = PRIMARY_KEY_ASC
  ): SettingsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteModeById` mutation."""
input DeleteModeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMode` mutation."""
input DeleteModeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Mode` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Mode` mutation."""
type DeleteModePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Mode` that was deleted by this mutation."""
  mode: Mode
  deletedModeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Mode`. May be used by Relay 1."""
  modeEdge(
    """The method to use when ordering `Mode`."""
    orderBy: [ModesOrderBy!] = PRIMARY_KEY_ASC
  ): ModesEdge
}

"""All input for the `deleteSettingById` mutation."""
input DeleteSettingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSetting` mutation."""
input DeleteSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Setting` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Setting` mutation."""
type DeleteSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Setting` that was deleted by this mutation."""
  setting: Setting
  deletedSettingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mode` that is related to this `Setting`."""
  modeByModeId: Mode

  """An edge for our `Setting`. May be used by Relay 1."""
  settingEdge(
    """The method to use when ordering `Setting`."""
    orderBy: [SettingsOrderBy!] = PRIMARY_KEY_ASC
  ): SettingsEdge
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mode implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!

  """Reads and enables pagination through a set of `Setting`."""
  settingsByModeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Setting`."""
    orderBy: [SettingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SettingCondition
  ): SettingsConnection!
}

"""
A condition to be used against `Mode` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ModeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Mode`"""
input ModeInput {
  id: Int
  name: String!
}

"""Represents an update to a `Mode`. Fields that are set will be updated."""
input ModePatch {
  id: Int
  name: String
}

"""A connection to a list of `Mode` values."""
type ModesConnection {
  """A list of `Mode` objects."""
  nodes: [Mode]!

  """
  A list of edges which contains the `Mode` and cursor to aid in pagination.
  """
  edges: [ModesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Mode` you could get from the connection."""
  totalCount: Int!
}

"""A `Mode` edge in the connection."""
type ModesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Mode` at the end of the edge."""
  node: Mode
}

"""Methods to use when ordering `Mode`."""
enum ModesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Mode`."""
  createMode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateModeInput!
  ): CreateModePayload

  """Creates a single `Setting`."""
  createSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSettingInput!
  ): CreateSettingPayload

  """Updates a single `Mode` using its globally unique id and a patch."""
  updateMode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateModeInput!
  ): UpdateModePayload

  """Updates a single `Mode` using a unique key and a patch."""
  updateModeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateModeByIdInput!
  ): UpdateModePayload

  """Updates a single `Setting` using its globally unique id and a patch."""
  updateSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSettingInput!
  ): UpdateSettingPayload

  """Updates a single `Setting` using a unique key and a patch."""
  updateSettingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSettingByIdInput!
  ): UpdateSettingPayload

  """Deletes a single `Mode` using its globally unique id."""
  deleteMode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteModeInput!
  ): DeleteModePayload

  """Deletes a single `Mode` using a unique key."""
  deleteModeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteModeByIdInput!
  ): DeleteModePayload

  """Deletes a single `Setting` using its globally unique id."""
  deleteSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSettingInput!
  ): DeleteSettingPayload

  """Deletes a single `Setting` using a unique key."""
  deleteSettingById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSettingByIdInput!
  ): DeleteSettingPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Mode`."""
  allModes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Mode`."""
    orderBy: [ModesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ModeCondition
  ): ModesConnection

  """Reads and enables pagination through a set of `Setting`."""
  allSettings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Setting`."""
    orderBy: [SettingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SettingCondition
  ): SettingsConnection
  modeById(id: Int!): Mode
  settingById(id: Int!): Setting

  """Reads a single `Mode` using its globally unique `ID`."""
  mode(
    """The globally unique `ID` to be used in selecting a single `Mode`."""
    nodeId: ID!
  ): Mode

  """Reads a single `Setting` using its globally unique `ID`."""
  setting(
    """The globally unique `ID` to be used in selecting a single `Setting`."""
    nodeId: ID!
  ): Setting
}

type Setting implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  modeId: Int!
  name: String!
  type: ValueType!
  value: JSON!

  """Reads a single `Mode` that is related to this `Setting`."""
  modeByModeId: Mode
}

"""
A condition to be used against `Setting` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SettingCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `modeId` field."""
  modeId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `type` field."""
  type: ValueType

  """Checks for equality with the object’s `value` field."""
  value: JSON
}

"""An input for mutations affecting `Setting`"""
input SettingInput {
  id: Int
  modeId: Int!
  name: String!
  type: ValueType!
  value: JSON!
}

"""
Represents an update to a `Setting`. Fields that are set will be updated.
"""
input SettingPatch {
  id: Int
  modeId: Int
  name: String
  type: ValueType
  value: JSON
}

"""A connection to a list of `Setting` values."""
type SettingsConnection {
  """A list of `Setting` objects."""
  nodes: [Setting]!

  """
  A list of edges which contains the `Setting` and cursor to aid in pagination.
  """
  edges: [SettingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Setting` you could get from the connection."""
  totalCount: Int!
}

"""A `Setting` edge in the connection."""
type SettingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Setting` at the end of the edge."""
  node: Setting
}

"""Methods to use when ordering `Setting`."""
enum SettingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MODE_ID_ASC
  MODE_ID_DESC
  NAME_ASC
  NAME_DESC
  TYPE_ASC
  TYPE_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateModeById` mutation."""
input UpdateModeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Mode` being updated.
  """
  modePatch: ModePatch!
  id: Int!
}

"""All input for the `updateMode` mutation."""
input UpdateModeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Mode` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Mode` being updated.
  """
  modePatch: ModePatch!
}

"""The output of our update `Mode` mutation."""
type UpdateModePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Mode` that was updated by this mutation."""
  mode: Mode

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Mode`. May be used by Relay 1."""
  modeEdge(
    """The method to use when ordering `Mode`."""
    orderBy: [ModesOrderBy!] = PRIMARY_KEY_ASC
  ): ModesEdge
}

"""All input for the `updateSettingById` mutation."""
input UpdateSettingByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Setting` being updated.
  """
  settingPatch: SettingPatch!
  id: Int!
}

"""All input for the `updateSetting` mutation."""
input UpdateSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Setting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Setting` being updated.
  """
  settingPatch: SettingPatch!
}

"""The output of our update `Setting` mutation."""
type UpdateSettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Setting` that was updated by this mutation."""
  setting: Setting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Mode` that is related to this `Setting`."""
  modeByModeId: Mode

  """An edge for our `Setting`. May be used by Relay 1."""
  settingEdge(
    """The method to use when ordering `Setting`."""
    orderBy: [SettingsOrderBy!] = PRIMARY_KEY_ASC
  ): SettingsEdge
}

enum ValueType {
  COLOR
  PERCENT
}
